version: 2.1
parameters:
  image-repository:
    type: string
    default: "montepoeli.club"
  client-image-name:
    type: string
    default: "montepouli-client"
  server-image-name:
    type: string
    default: "montepouli-server"
  tag-to-be-e2e:
    type: string
    default: "to_be_e2e"  
  tag-e2e:
    type: string
    default: "e2e"  
  default-build-context:
    type: string
    default: "circleci/node:12"
  e2e-client-environment-variables:
    type: string
    default: "e2e"
  production-client-environment-variables:
    type: string
    default: "server"
      
jobs:
  save-docker-tags-as-artifacts:
    docker:
      - image: << pipeline.parameters.default-build-context >>

    working_directory: ~/repo
    steps:
      - checkout
      
      - run:
          command: |
            cd client
            
            if [[ ${CIRCLE_BRANCH} = "master" ]]
            then
              CLIENT_TAG=$(git log -n 1 --skip 1 --pretty=format:"%H")
            else
              CLIENT_TAG=${CIRCLE_SHA1}
            fi
            
            echo ${CLIENT_TAG} > /tmp/client-version.txt

      - run:
          command: |
            cd server

            if [[ ${CIRCLE_BRANCH} = "master" ]]
            then
              SERVER_TAG=$(git log -n 1 --skip 1 --pretty=format:"%H")
            else 
              SERVER_TAG=${CIRCLE_SHA1}
            fi
            
            echo ${SERVER_TAG} > /tmp/server-version.txt
            
      - store_artifacts:
          path: /tmp/client-version.txt
      
      - store_artifacts:
          path: /tmp/server-version.txt

      - persist_to_workspace:
          root: /tmp
          paths:
            - client-version.txt
            - server-version.txt
            
  build-client-base:
    docker:
      - image: << pipeline.parameters.default-build-context >>
    
    environment:
      - IMAGE_CLIENT_NAME: << pipeline.parameters.client-image-name >>
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo

      - setup_remote_docker

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV
      
      - run:
          name: Login to montepoeli.club docker
          command: |
            docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD
      
      - run:
          name: Test and build client image, if it not available in context
          command: |            
            if [[ "$(docker images -q $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG 2> /dev/null)" == "" ]]; then
              docker build -t $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG . -f Dockerfile.prod  --compress
            fi
            
      - run:
          name: Fetch coverage from the image and upload coverage to codecov
          command: |            
            docker create -ti --name dummy $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG sh
            docker cp dummy:/usr/coverage .
            docker rm -f dummy
            
            bash <(curl -s https://codecov.io/bash)

      - deploy:
          name: Push client image to montepoeli.club registry
          command: docker push $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG

  build-server:
    docker:
      - image: << pipeline.parameters.default-build-context >>

    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - IMAGE_SERVER_NAME: << pipeline.parameters.server-image-name >>
      
    working_directory: ~/repo/server
    steps:
      - checkout:
          path: ~/repo

      - setup_remote_docker
    
      - attach_workspace:
          at: /tmp
      
      - run:
          name: Setup Environment Variables
          command: |
            echo "export SERVER_TAG=$(cat /tmp/server-version.txt)" >> $BASH_ENV

      - run:
          name: Login to montepoeli.club docker
          command: |
            docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD
      
      - run:
          name: See if the docker image is avaialbe current client tag
          command: |
            docker pull $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG || true

      - run: 
          name: Test and build image, if it is not available in context
          command: |
            if [[ "$(docker images -q $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG  2> /dev/null)" == "" ]]; then
              docker build -t $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG . -f Dockerfile.prod  --compress --cache-from=$IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG
            fi

      - run:
          name: Fetch coverage from the image and upload coverage to codecov
          command: |            
            docker create -ti --name dummy $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG sh
            docker cp dummy:/usr/coverage .
            docker rm -f dummy
            
            bash <(curl -s https://codecov.io/bash)

      - deploy:
          command: |
            docker push $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG
  
  make-client-image-e2e-test-ready:
    docker:
      - image: << pipeline.parameters.default-build-context >>

    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - IMAGE_CLIENT_NAME: << pipeline.parameters.client-image-name >>
      - IMAGE_SERVER_NAME: << pipeline.parameters.server-image-name >>
      - TAG_TO_BE_E2E: << pipeline.parameters.tag-to-be-e2e >>
      - CLIENT_TYPE: << pipeline.parameters.e2e-client-environment-variables >>

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo
      
      - setup_remote_docker

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV

            CLIENT_TAG=$(cat /tmp/client-version.txt)
            echo "export CLIENT_TAG_TO_BE_E2E=$CLIENT_TAG-$TAG_TO_BE_E2E" >> $BASH_ENV

      - run:
          name: Log into the image repository
          command: |
            docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Insert e2e dynamic environment varibles in client image
          command: |
            docker build -f Dockerfile.configured . -t $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG_TO_BE_E2E --build-arg CLIENT_BASE_IMAGE_NAME=$IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME --build-arg CLIENT_BASE_IMAGE_TAG=$CLIENT_TAG --build-arg CLIENT_TYPE=$CLIENT_TYPE

      - deploy: 
          name: Push e2e ready client image  
          command: |
            docker push $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG_TO_BE_E2E

  make-server-image-e2e-test-ready:  
    docker:
      - image: << pipeline.parameters.default-build-context >>

    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - IMAGE_CLIENT_NAME: << pipeline.parameters.client-image-name >>
      - IMAGE_SERVER_NAME: << pipeline.parameters.server-image-name >>
      - TAG_TO_BE_E2E: << pipeline.parameters.tag-to-be-e2e >>
      - CLIENT_TYPE: << pipeline.parameters.e2e-client-environment-variables >>

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo

      - setup_remote_docker

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export SERVER_TAG=$(cat /tmp/server-version.txt)" >> $BASH_ENV

            SERVER_TAG=$(cat /tmp/server-version.txt)
            echo "export SERVER_TAG_TO_BE_E2E=$SERVER_TAG-$TAG_TO_BE_E2E" >> $BASH_ENV

      - run:
          name: Log into the image repository
          command: |
            docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Fetch and Retag server image with to be e2e tag
          command: |
            docker pull $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG
            docker tag $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_TO_BE_E2E

      - deploy: 
          name: Push e2e ready server image
          command: |
            docker push $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_TO_BE_E2E

  e2e-tests:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/repo
    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - CLIENT_BASE_IMAGE_NAME: montepoeli.club/<< pipeline.parameters.client-image-name >>
      - SERVER_IMAGE_NAME: montepoeli.club/<< pipeline.parameters.server-image-name >>
      - IMAGE_CLIENT_NAME: << pipeline.parameters.client-image-name >>
      - IMAGE_SERVER_NAME: << pipeline.parameters.server-image-name >>
      - TAG_TO_BE_E2E: << pipeline.parameters.tag-to-be-e2e >>
      - TAG_E2E_TESTED: << pipeline.parameters.tag-e2e >>
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            CLIENT_TAG=$(cat /tmp/client-version.txt)
            SERVER_TAG=$(cat /tmp/server-version.txt)

            echo "export CLIENT_BASE_IMAGE_TAG=$CLIENT_TAG-$TAG_TO_BE_E2E" >> $BASH_ENV
            echo "export SERVER_IMAGE_TAG=$SERVER_TAG-$TAG_TO_BE_E2E" >> $BASH_ENV

            echo "export CLIENT_TAG_E2E_TESTED=$CLIENT_TAG-$TAG_E2E_TESTED" >> $BASH_ENV
            echo "export SERVER_TAG_E2E_TESTED=$SERVER_TAG-$TAG_E2E_TESTED" >> $BASH_ENV
            
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: npm run start:e2e-environment-build-server
      - run: 
          name: Retag tested images
          command: | 
            docker tag $CLIENT_BASE_IMAGE_NAME:$CLIENT_BASE_IMAGE_TAG $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG_E2E_TESTED
            docker tag $SERVER_IMAGE_NAME:$SERVER_IMAGE_TAG $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_E2E_TESTED
           
      - run: 
          name: Push retagged images
          command: | 
            docker push $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG_E2E_TESTED
            docker push $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_E2E_TESTED

  rebuild-client-base:
    docker:
      - image: << pipeline.parameters.default-build-context >>
    
    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - CLIENT_BASE_IMAGE: montepoeli-client-base-node-modules
      - TAG: "latest"
    
    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo
      
      - setup_remote_docker

      - run:
          name: Login to image repository
          command: docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Build docker image with node modules
          command: docker build -f Dockerfile.node_modules -t $IMAGE_REPOSITORY/$CLIENT_BASE_IMAGE:$TAG . --compress

      - run:
          name: Push image
          command: docker push $IMAGE_REPOSITORY/$CLIENT_BASE_IMAGE:$TAG
           
  update-version:
    docker:
      - image: << pipeline.parameters.default-build-context >>

    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - add_ssh_keys:
          fingerprints:
            - "d7:e3:8a:3a:84:5f:4b:48:cd:c0:d4:bf:66:59:16:e1"
      
      - restore_cache:
          keys:
          - v1-dependencies-root-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-root

      - run:
          name: Setup environment for version increase
          command: |
            git config --global user.email "rogierderuijter@hotmail.com"
            git config --global user.name "Circle Ci"
                        
            yarn install
    
      - save_cache:
          paths:
          - node_modules
          key: v1-dependencies-root-{{ checksum "yarn.lock" }}
      - run: 
          name: bump version based on last commit message
          command: |
            npx semantic-release

  save-new-version:
    docker:
      - image: << pipeline.parameters.default-build-context >>

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: |
            git pull

            VERSION=$(grep '"version":' package.json | cut -d\" -f4)
            
            echo $VERSION > /tmp/version-updated.txt
                    
      - store_artifacts:
          path: /tmp/version-updated.txt

      - persist_to_workspace:
          root: /tmp
          paths:
            - version-updated.txt

  make-client-image-production-ready:
    docker:
      - image: << pipeline.parameters.default-build-context >>
    
    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - IMAGE_CLIENT_NAME: << pipeline.parameters.client-image-name >>
      - TAG_E2E_TESTED: << pipeline.parameters.tag-e2e >>
      - CLIENT_TYPE: << pipeline.parameters.production-client-environment-variables >> 

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG_E2E_TESTED=$(cat /tmp/client-version.txt)-$TAG_E2E_TESTED" >> $BASH_ENV
            echo "export CLIENT_TAG_PRODUCTION=$(cat /tmp/version-updated.txt)" >> $BASH_ENV

      - run:
          command: |
            docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          command: |
            docker build -f Dockerfile.configured -t $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG_PRODUCTION . --build-arg CLIENT_BASE_IMAGE_NAME=$IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME --build-arg CLIENT_BASE_IMAGE_TAG=$CLIENT_TAG_E2E_TESTED --build-arg CLIENT_TYPE=$CLIENT_TYPE

      - deploy:
          command: |
            docker push $IMAGE_REPOSITORY/$IMAGE_CLIENT_NAME:$CLIENT_TAG_PRODUCTION
      
      - deploy:
          command: |
            docker tag $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG_PRODUCTION $DOMAIN/$IMAGE_CLIENT_NAME:latest
            docker push $DOMAIN/$IMAGE_CLIENT_NAME:latest

  make-server-image-production-ready:
    docker:
      - image: << pipeline.parameters.default-build-context >>
    
    environment:
      - IMAGE_REPOSITORY: << pipeline.parameters.image-repository >>
      - IMAGE_SERVER_NAME: << pipeline.parameters.server-image-name >>
      - TAG_E2E_TESTED: << pipeline.parameters.tag-e2e >>

    working_directory: ~/repo
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp
          
      - run:
          name: Setup Environment Variables
          command: |
            echo "export SERVER_TAG_E2E_TESTED=$(cat /tmp/server-version.txt)-$TAG_E2E_TESTED" >> $BASH_ENV
            echo "export SERVER_TAG_PRODUCTION=$(cat /tmp/version-updated.txt)" >> $BASH_ENV

      - run: docker login $IMAGE_REPOSITORY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run: |
          docker pull $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_E2E_TESTED
          docker tag $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_E2E_TESTED $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_PRODUCTION

      - deploy:
          command: docker push $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_PRODUCTION
            
      - deploy:
          command: |
            docker tag $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:$SERVER_TAG_PRODUCTION $DOMAIN/$IMAGE_SERVER_NAME:latest
            docker push $IMAGE_REPOSITORY/$IMAGE_SERVER_NAME:latest

workflows:
  version: 2
  client_and_server:
    jobs:
      - save-docker-tags-as-artifacts

      - build-client-base:
          requires:
            - save-docker-tags-as-artifacts

      - build-server:
          requires:
            - save-docker-tags-as-artifacts

      - make-client-image-e2e-test-ready:
          requires:
            - build-client-base
          filters:
            branches:
              only: 
                - master
                - /depfu.*/
                - /dependabot.*/

      - make-server-image-e2e-test-ready:
          requires:
            - build-server
          filters:
            branches:
              only: 
                - master
                - /depfu.*/
                - /dependabot.*/

      - e2e-tests:
          requires:
            - make-client-image-e2e-test-ready
            - make-server-image-e2e-test-ready
          filters:
            branches:
              only: 
                - master
                - /depfu.*/
                - /dependabot.*/

      - rebuild-client-base:
            requires:
              - e2e-tests
            filters:
              branches:
                only: 
                  - /depfu/batch_all/client.*/

      - update-version:
          requires:
            - e2e-tests
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/

      - save-new-version:
          requires:
            - update-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/

      - make-client-image-production-ready:
          requires:
            - save-new-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/

      - make-server-image-production-ready:
          requires:
            - save-new-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/
