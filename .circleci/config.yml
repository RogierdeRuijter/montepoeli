version: 2.1
jobs:
  save-docker-tags-as-artifacts:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: |
            cd client
            echo ${CIRCLE_WORKFLOW_ID} > /tmp/client-version.txt

      - run:
          command: |
            cd server
            echo ${CIRCLE_WORKFLOW_ID} > /tmp/server-version.txt
            
      - store_artifacts:
          path: /tmp/client-version.txt
      
      - store_artifacts:
          path: /tmp/server-version.txt

      - persist_to_workspace:
          root: /tmp
          paths:
            - client-version.txt
            - server-version.txt
            
  build-client-base:
    docker:
      - image: circleci/node:12-browsers

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo

      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV

      - restore_cache:
          keys:
          - v1-dependencies-client-{{ checksum "package-lock.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-client

      - run:
          name: Install node modules
          command: |
            npm install
            npm run compile-ivy-dependencies-test

      - save_cache:
          paths:
          - node_modules
          key: v1-dependencies-client-{{ checksum "package-lock.json" }}

      - run: 
          name: Run visual regression test shots compared to shots file in the repo
          
          command: |
            npm run test:visual --updateSnapshot

      - run: 
          name: Run tests with coverage and store coverage on server
          
          command: |
            npm run test:cov

            bash <(curl -s https://codecov.io/bash)
      
      - run:
          command: |
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          command: |
              IMAGE_CLIENT_NAME=montepouli-client
              BASE_IMAGE_CLIENT_NAME=montepouli-client-base

              docker build -t $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG . -f Dockerfile.prod
            
      - deploy:
          command: |
            IMAGE_CLIENT_NAME=montepouli-client
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD
            docker push $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG

  build-server:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo/server
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true
    
      - attach_workspace:
          at: /tmp
      
      - run:
          name: Setup Environment Variables
          command: |
            echo "export SERVER_TAG=$(cat /tmp/server-version.txt)" >> $BASH_ENV
      
      - restore_cache:
          keys:
          - v1-dependencies-server-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-server

      - run:
          name: Install node modules
          command: |
            yarn install

      - save_cache:
          paths:
          - node_modules
          key: v1-dependencies-server-{{ checksum "yarn.lock" }}

      - run: 
          name: Run tests with coverage and store results on server

          command: |
            yarn test:cov

            bash <(curl -s https://codecov.io/bash)


      - run: |
          IMAGE_SERVER_NAME=montepouli-server

          docker build -t $DOMAIN/$IMAGE_SERVER_NAME:$SERVER_TAG . -f Dockerfile.prod

      - deploy:
          command: |
            IMAGE_SERVER_NAME=montepouli-server
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD
            docker push $DOMAIN/$IMAGE_SERVER_NAME:$SERVER_TAG

  swap-client-config-e2e:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV

      - run:
          command: |
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          command: |
            cd client
            IMAGE_CLIENT_NAME=montepouli-client-e2e
            docker build -f Dockerfile.configured . -t $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG --build-arg CLIENT_BASE_IMAGE_NAME=montepoeli.club/montepouli-client --build-arg CLIENT_BASE_IMAGE_TAG=$CLIENT_TAG --build-arg CLIENT_TYPE=e2e

      - deploy:
          command: |
            IMAGE_CLIENT_NAME=montepouli-client-e2e
            docker push $DOMAIN/$IMAGE_CLIENT_NAME:$CLIENT_TAG

  e2e-tests:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/repo
    environment:
      - CLIENT_BASE_IMAGE_NAME: montepoeli.club/montepouli-client-e2e
      - SERVER_IMAGE_NAME: montepoeli.club/montepouli-server
      - CLIENT_TYPE: e2e
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_BASE_IMAGE_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV
            echo "export SERVER_IMAGE_TAG=$(cat /tmp/server-version.txt)" >> $BASH_ENV
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: npm run start:e2e-environment-build-server
    

  rebuild-client-base:
    docker:
      - image: circleci/node:12

    working_directory: ~/repo/client
    steps:
      - checkout:
          path: ~/repo

      - run:
          command: |
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          command: |
            docker build -f Dockerfile.node_modules -t montepoeli.club/montepoeli-client-base-node-modules:latest .

      - run:
          command : |
            docker push montepoeli.club/montepoeli-client-base-node-modules:latest
           
  update-version:
    docker:
      - image: circleci/node:11
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - add_ssh_keys:
          fingerprints:
            - "d7:e3:8a:3a:84:5f:4b:48:cd:c0:d4:bf:66:59:16:e1"
      
      - restore_cache:
          keys:
          - v1-dependencies-root-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-root

      - run:
          name: Setup environment for version increase
          command: |
            git config --global user.email "rogierderuijter@hotmail.com"
            git config --global user.name "Circle Ci"
                        
            yarn install
    
      - save_cache:
          paths:
          - node_modules
          key: v1-dependencies-root-{{ checksum "yarn.lock" }}
      - run: 
          name: bump version based on last commit message
          command: |
            npx semantic-release

  save-new-version:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: |
            git pull

            VERSION=$(grep '"version":' package.json | cut -d\" -f4)
            
            echo $VERSION > /tmp/version-updated.txt
                    
      - store_artifacts:
          path: /tmp/version-updated.txt

      - persist_to_workspace:
          root: /tmp
          paths:
            - version-updated.txt

  swap-client-config:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: /tmp

      - run:
          name: Setup Environment Variables
          command: |
            echo "export CLIENT_TAG=$(cat /tmp/client-version.txt)" >> $BASH_ENV
            echo "export CLIENT_TAG_UPDATED=$(cat /tmp/version-updated.txt)" >> $BASH_ENV

      - run:
          command: |
            docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          command: |
            IMAGE_CLIENT_NAME=montepouli-client
            TESTED_CLIENT_TAG=$CLIENT_TAG_UPDATED-e2e
            cd client
            docker build -f Dockerfile.configured -t $DOMAIN/$IMAGE_CLIENT_NAME:$TESTED_CLIENT_TAG . --build-arg CLIENT_BASE_IMAGE_NAME=montepoeli.club/montepouli-client-e2e --build-arg CLIENT_BASE_IMAGE_TAG=$CLIENT_TAG --build-arg CLIENT_TYPE=server

      - deploy:
          command: |
            TESTED_CLIENT_TAG=$CLIENT_TAG_UPDATED-e2e
            IMAGE_CLIENT_NAME=montepouli-client
            docker push $DOMAIN/$IMAGE_CLIENT_NAME:$TESTED_CLIENT_TAG
      
      - deploy:
          command: |
            TESTED_CLIENT_TAG=$CLIENT_TAG_UPDATED-e2e
            IMAGE_CLIENT_NAME=montepouli-client

            docker tag $DOMAIN/$IMAGE_CLIENT_NAME:$TESTED_CLIENT_TAG $DOMAIN/$IMAGE_CLIENT_NAME:latest
            docker push $DOMAIN/$IMAGE_CLIENT_NAME:latest

  retag-server-image:
    docker:
      - image: circleci/node:11

    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: /tmp
          
      - run:
          name: Setup Environment Variables
          command: |
            echo "export SERVER_TAG=$(cat /tmp/server-version.txt)" >> $BASH_ENV
            echo "export SERVER_TAG_UPDATED=$(cat /tmp/version-updated.txt)" >> $BASH_ENV

      - run: docker login https://montepoeli.club -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run: |
          IMAGE_SERVER_NAME=montepouli-server
          TESTED_SERVER_TAG=$SERVER_TAG_UPDATED-e2e

          docker pull $DOMAIN/$IMAGE_SERVER_NAME:$SERVER_TAG
          docker tag $DOMAIN/$IMAGE_SERVER_NAME:$SERVER_TAG $DOMAIN/$IMAGE_SERVER_NAME:$TESTED_SERVER_TAG

      - deploy:
          command: |
            TESTED_SERVER_TAG=$SERVER_TAG_UPDATED-e2e
            IMAGE_SERVER_NAME=montepouli-server

            docker push $DOMAIN/$IMAGE_SERVER_NAME:$TESTED_SERVER_TAG
            
      - deploy:
          command: |
            TESTED_SERVER_TAG=$SERVER_TAG_UPDATED-e2e
            IMAGE_SERVER_NAME=montepouli-server
            
            docker tag $DOMAIN/$IMAGE_SERVER_NAME:$TESTED_SERVER_TAG $DOMAIN/$IMAGE_SERVER_NAME:latest
            docker push $DOMAIN/$IMAGE_SERVER_NAME:latest

workflows:
  version: 2
  build_and_test:
    jobs:
      - save-docker-tags-as-artifacts

      - build-client-base:
          requires:
            - save-docker-tags-as-artifacts

      - build-server:
          requires:
            - save-docker-tags-as-artifacts
      
      - swap-client-config-e2e:
          requires:
            - build-client-base
          filters:
            branches:
              only: 
                - master
                - /depfu.*/
                - /dependabot.*/

      - e2e-tests:
          requires:
            - swap-client-config-e2e
            - build-server
          filters:
            branches:
              only: 
                - master
                - /depfu.*/
                - /dependabot.*/

      - rebuild-client-base:
            requires:
              - e2e-tests
            filters:
                branches:
                  only: 
                    - /depfu/batch_all/client.*/

      - update-version:
          requires:
            - e2e-tests
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/


      - save-new-version:
          requires:
            - update-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/

      - swap-client-config:
          requires:
            - save-new-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/

      - retag-server-image:
          requires:
            - save-new-version
          filters:
            branches:
              only: 
                - master
                - /([0-9])+?(\.([0-9])+)\.x/
