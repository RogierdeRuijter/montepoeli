{"version":3,"sources":["/Users/rogierderuijter/Projects/montepoeli/node_modules/@angular/material/__ivy_ngcc__/fesm2015/toolbar.js","./src/app/shared/modules/user-action/components/user-actions/user-actions.component.ts","./src/app/shared/modules/user-action/components/user-actions/user-actions.component.html","./src/app/shared/modules/user-action/user-action.module.ts"],"names":[],"mappings":"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","file":"default~modules-larger-screen-content-large-screen-content-component~modules-mobile-content-mobile-c~d5cf2ccb-es2015.js","sourcesContent":["import { Directive, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n/**\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nclass MatToolbarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatToolbarBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {\n}\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) { return new (t || MatToolbarRow)(); };\nMatToolbarRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatToolbarRow, selectors: [[\"mat-toolbar-row\"]], hostAttrs: [1, \"mat-toolbar-row\"], exportAs: [\"matToolbarRow\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' }\n            }]\n    }], null, null); })();\nclass MatToolbar extends _MatToolbarMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!isDevMode() || !this._platform.isBrowser) {\n            return;\n        }\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._checkToolbarMixedModes()));\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @private\n     * @return {?}\n     */\n    _checkToolbarMixedModes() {\n        if (!this._toolbarRows.length) {\n            return;\n        }\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        /** @type {?} */\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !(node.classList && node.classList.contains('mat-toolbar-row'))))\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)))\n            .some((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !!(node.textContent && node.textContent.trim())));\n        if (isCombinedUsage) {\n            throwToolbarMixedModesError();\n        }\n    }\n}\nMatToolbar.ɵfac = function MatToolbar_Factory(t) { return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatToolbar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatToolbar, selectors: [[\"mat-toolbar\"]], contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    } }, hostAttrs: [1, \"mat-toolbar\"], hostVars: 4, hostBindings: function MatToolbar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matToolbar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatToolbar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { _toolbarRows: [{\n            type: ContentChildren,\n            args: [MatToolbarRow, { descendants: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatToolbar.prototype._document;\n    /**\n     * Reference to all toolbar row elements that have been projected.\n     * @type {?}\n     */\n    MatToolbar.prototype._toolbarRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatToolbar.prototype._platform;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatToolbarModule });\nMatToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatToolbarModule_Factory(t) { return new (t || MatToolbarModule)(); }, imports: [[MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, { declarations: function () { return [MatToolbar,\n        MatToolbarRow]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatToolbar,\n        MatToolbarRow,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n\n//# sourceMappingURL=toolbar.js.map","import { ChangeDetectionStrategy, Component, Input, OnInit, ViewChild, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { IconColor, Icons, IconSize } from '../../../../static-files/enums';\nimport { MatSelect } from '@angular/material/select';\nimport { AuthService } from '../../../auth/services/auth/auth.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LanguagePreferenceService } from '../../../translate/services/language-preference.service';\nimport { Subject, timer, Observable } from 'rxjs';\nimport { UserStoreService } from '../../../user/store/user-store.service';\nimport { User } from '../../../../interfaces/user.interface';\nimport { NotificationService } from '../../../notification/services/notification/notification.service';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-user-actions',\n  templateUrl: './user-actions.component.html',\n  styleUrls: ['./user-actions.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserActionsComponent implements OnInit, OnDestroy {\n\n  @ViewChild('userSettingsDropDown')\n  public userSettingsDropDown: MatSelect;\n\n  @Input()\n  public settingsIconColor: IconColor;\n\n  public Icons = Icons;\n  public IconSize = IconSize;\n\n  public alternativeLanguage: string;\n  public setIconLanguage: string;\n\n  private user: User;\n  private destory$: Subject<void> = new Subject();\n\n  constructor(private authService: AuthService,\n              private translateService: TranslateService,\n              private languagePreferenceService: LanguagePreferenceService,\n              private userStoreService: UserStoreService,\n              private changeDetectorRef: ChangeDetectorRef,\n              private notificationService: NotificationService) { }\n\n  public ngOnInit(): void {\n    this.setAlternativeLanguage();\n\n    this.userStoreService.get(this.destory$)\n      .subscribe((user: User) => this.user = user);\n\n    this.translateService.onLangChange\n      .pipe(\n        takeUntil(this.destory$)\n      )\n      .subscribe((langObject: any) => {\n        const lang = langObject.lang;\n\n        if (lang === 'en') {\n          this.notificationService.info(this.translateService.instant('info.language-changed.english'));\n        }\n    \n        if (lang === 'nl') {\n          this.notificationService.info(this.translateService.instant('info.language-changed.dutch'));\n        }\n\n        this.setAlternativeLanguage(lang);\n    });\n  }\n\n  private setAlternativeLanguage(lang?: string): void {\n    const currentLang = lang ? lang : this.translateService.currentLang;\n    \n    this.alternativeLanguage = this.translateService.getLangs().find(lang1 => lang1 !== currentLang);\n    \n    if (this.alternativeLanguage === 'en') {\n      this.setIconLanguage = 'ie';\n    }\n\n    if (this.alternativeLanguage === 'nl') {\n      this.setIconLanguage = 'nl';\n    }\n\n    this.changeDetectorRef.detectChanges();\n  }\n\n  public userIconHandler(): void {\n    this.userSettingsDropDown.open();\n  }\n\n  public switchLanguageHandler(): void {\n    this.waitForDropDownToClose()\n      .subscribe(() => this.languagePreferenceService.setWithLanguageCode(this.user, this.alternativeLanguage));\n  }\n\n  private waitForDropDownToClose(): Observable<any> {\n    return timer(300);\n  }\n\n  public logoutHandler(): void {\n    this.authService.logout();\n  }\n\n  public ngOnDestroy(): void {\n    this.destory$.next();\n    this.destory$.complete();\n  }\n}\n","<app-button-icon id=\"user-settings\"\n                 [icon]=\"Icons.USER\"\n                 [iconSize]=\"IconSize.SMALL_MEDIUM\"\n                 (clickEvent)=\"userIconHandler()\">\n</app-button-icon>\n\n<mat-select #userSettingsDropDown class=\"selector\">\n  <mat-option (click)=\"switchLanguageHandler()\" [id]=\"alternativeLanguage\">\n    <div class=\"d-flex justify-content-center\">\n      <!-- [class]=\"setIconLanguage === 'ie' ? 'ie' : 'nl'\" -->\n      <img *ngIf=\"setIconLanguage === 'ie'\" style=\"width: 35px;\" src=\"../../../../../../assets/images/ie.svg\">\n      <img *ngIf=\"setIconLanguage === 'nl'\" style=\"width: 35px;\" src=\"../../../../../../assets/images/nl.svg\">\n    </div>\n  </mat-option>\n  <mat-option (click)=\"logoutHandler()\" id=\"logout\">\n      <span [appTranslate]=\"'user-actions.logout'\"></span>\n  </mat-option>\n</mat-select>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatSelectModule } from '@angular/material/select';\nimport {IconModule} from '../icon/icon.module';\nimport {ButtonModule} from '../button/button.module';\nimport {UserActionsComponent} from './components/user-actions/user-actions.component';\nimport { CustomTranslateModule } from '../translate/custom-translate.module';\n\n@NgModule({\n  declarations: [UserActionsComponent],\n  exports: [UserActionsComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    MatOptionModule,\n    IconModule,\n    ButtonModule,\n    CustomTranslateModule\n  ]\n})\nexport class UserActionModule { }\n"],"sourceRoot":"webpack:///"}