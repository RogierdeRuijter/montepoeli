{"version":3,"sources":["webpack:///Users/rogierderuijter/Projects/montepoeli/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","webpack:///Users/rogierderuijter/Projects/montepoeli/node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js","webpack:///src/app/main/modules/login/components/login-form/login-form.component.ts","webpack:///src/app/main/modules/login/components/login-form/login-form.component.html","webpack:///src/app/main/modules/login/login-routing.module.ts","webpack:///src/app/main/modules/login/login.component.ts","webpack:///src/app/main/modules/login/login.component.html","webpack:///src/app/main/modules/login/login.module.ts"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ctorParameters","type","ɵprov","factory","token","providedIn","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","_destroyed","_enabled","_previousMinRows","_textareaElement","nativeElement","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","resizeToFitContent","window","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","value","_minRows","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","selectionStart","selectionEnd","isStopped","document","activeElement","setSelectionRange","_maxRows","reset","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","host","TextFieldModule","ɵmod","ɵinj","TextFieldModule_Factory","imports","ngJitMode","declarations","exports","MatTextareaAutosize","MatTextareaAutosize_Factory","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","features","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","inputValueAccessor","ngZone","_uid","_isServer","_isNativeSelect","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","_inputValueAccessor","_previousNativeValue","id","IOS","el","nodeName","toLowerCase","multiple","updateErrorState","_dirtyCheckNativeValue","options","focus","isFocused","readonly","newValue","indexOf","validity","badInput","ids","_ariaDescribedby","join","disabled","_id","_validateType","_isTextarea","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","MatInput_Factory","hostVars","MatInput_HostBindings","MatInput_blur_HostBindingHandler","_focusChanged","MatInput_focus_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","required","errorState","toString","errorStateMatcher","provide","useExisting","decorators","providers","MatInputModule","MatInputModule_Factory","LoginFormComponent","ButtonFunction","ButtonTypes","GridSizes","Alignments","loginEvent","username","currentForm","password","loginEmitter","opacity","optional","templateUrl","styleUrls","animations","appRoutes","path","component","LoginRoutingModule","forChild","LoginComponent","authService","changeDetectorRef","isSubmitting","userInfo","potentialUser","login","error","detectChanges","onLogin","doExplicitChangeDetectionForAutofill","LoginModule"],"mappings":"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","file":"main-modules-login-login-module-es5.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, Output, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autofill.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = (/** @type {?} */ (((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true })));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false })));\n            }\n        }))));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        }));\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: (/**\n             * @return {?}\n             */\n            () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            })\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._monitoredElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._ngZone;\n}\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this.cdkAutofill.emit(event)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the autofill state of the element changes.\n     * @type {?}\n     */\n    CdkAutofill.prototype.cdkAutofill;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.resizeToFitContent(true)));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        let textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n        }));\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_minRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_maxRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_enabled;\n    /**\n     * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._initialHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._minRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._maxRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._enabled;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousMinRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._textareaElement;\n    /**\n     * Cached height of a textarea with a single row.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._cachedLineHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/text-field-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-value-accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatInputBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatInputBase.prototype._parentForm;\n    /** @type {?} */\n    MatInputBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInputBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => getSupportedInputTypes().has(t)));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                _elementRef.nativeElement.addEventListener('keyup', (/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    /** @type {?} */\n                    let el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                }));\n            }));\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (this._isNativeSelect) {\n            this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n    _isTextarea() {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        let validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            /** @type {?} */\n            const selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n            /** @type {?} */\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatInput.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_readonly;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_required;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._uid;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._previousNativeValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._inputValueAccessor;\n    /**\n     * The aria-describedby attribute on the input for improved a11y.\n     * @type {?}\n     */\n    MatInput.prototype._ariaDescribedby;\n    /**\n     * Whether the component is being rendered on the server.\n     * @type {?}\n     */\n    MatInput.prototype._isServer;\n    /**\n     * Whether the component is a native html select.\n     * @type {?}\n     */\n    MatInput.prototype._isNativeSelect;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.focused;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.stateChanges;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.controlType;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.autofilled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._disabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._type;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatInput.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._readonly;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._neverEmptyInputTypes;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._platform;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.ngControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ],\n        TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput,\n        MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput,\n        MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {Alignments, ButtonFunction, ButtonType, GridSizes} from '../../../../../shared/static-files/enums';\nimport {NgForm} from '@angular/forms';\nimport { trigger, transition, query, style, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ui-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n  animations: [\n    trigger('fadeInAnimation', [\n    transition('* => *', [\n    query(':enter', style({ opacity: 0 }), { optional: true }),\n    query(':enter', animate('2000ms', style({ opacity: 1 })), { optional: true })\n    ])\n  ])\n  ]\n})\nexport class LoginFormComponent {\n\n  @ViewChild('loginForm', {static: true})\n  public currentForm: NgForm;\n\n  @ViewChild('username', {static: true})\n  public usernameField: ElementRef;\n\n  public ButtonFunction = ButtonFunction;\n  public ButtonTypes = ButtonType;\n  public GridSizes = GridSizes;\n  public Alignments = Alignments;\n\n  @Output()\n  public loginEvent: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  public disabled: boolean;\n\n  public loginEmitter(): void {\n    this.loginEvent.emit({\n      username: this.currentForm.value.username,\n      password: this.currentForm.value.password,\n    });\n  }\n\n}\n","<div class=\"content\" id=\"loginPage\" >\n  <div [alignment]=\"[Alignments.VERTICAL, Alignments.CENTER]\"\n       [appGridRow]=\"[GridSizes.ALL]\"\n       class=\"pull-up\">\n    <div [appGridColumn]=\"[3]\" class=\"image-container\">\n      <div style=\"width: 200px;\">\n        <img class=\"image\" src=\"../../../../assets/images/logo_transparent.png\">\n      </div>\n    </div>\n    <form #loginForm=\"ngForm\" (submit)=\"loginEmitter()\"\n          [appGridColumn]=\"[3]\"\n          [appGridRow]=\"[GridSizes.ALL]\"\n          [alignment]=\"[Alignments.VERTICAL, Alignments.CENTER]\" @fadeInAnimation>\n      <div class=\"form-group\">\n        <mat-form-field class=\"full-width\">\n          <input #username autofocus id=\"username\" matInput name=\"username\" ngModel required>\n          <mat-placeholder>\n            <span appTranslate=\"pages.login.username\"></span>\n          </mat-placeholder>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group\">\n        <mat-form-field class=\"full-width\">\n          <input id=\"password\" id=\"password\" matInput name=\"password\" ngModel required type=\"password\">\n          <mat-placeholder>\n            <span appTranslate=\"pages.login.password\"></span>\n          </mat-placeholder>\n        </mat-form-field>\n      </div>\n\n      <app-button [buttonFunction]=\"ButtonFunction.LOGIN\"\n                  id=\"submit\"\n                  [buttonType]=\"ButtonTypes.NORMAL\"\n                  [disabled]=\"!loginForm.valid || disabled\">\n      </app-button>\n    </form>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst appRoutes: Routes = [\n  {\n    path: '',\n    component: LoginComponent\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(appRoutes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {}\n","import {ChangeDetectorRef, Component} from '@angular/core';\nimport { AuthService } from '../../../shared/modules/auth/services/auth/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n\n  public isSubmitting = false;\n\n  constructor(private authService: AuthService,\n              private changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  public onLogin(userInfo: any): void {\n    this.isSubmitting = true;\n    const potentialUser = {};\n\n    potentialUser['username'] = userInfo.username;\n    potentialUser['pwd'] = userInfo.password;\n\n    this.authService.login(potentialUser)\n      .subscribe(() => {},\n        (error) => this.isSubmitting = false);\n  }\n\n  public doExplicitChangeDetectionForAutofill(): void {\n    this.changeDetectorRef.detectChanges();\n  }\n\n}\n","<ui-login-form (loginEvent)=\"onLogin($event)\"\n               [disabled]=\"isSubmitting\"\n               (focusout)=\"doExplicitChangeDetectionForAutofill()\">\n</ui-login-form>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {GridModule} from '../../../shared/modules/grid/grid.module';\nimport {ButtonModule} from '../../../shared/modules/button/button.module';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {LoginRoutingModule} from './login-routing.module';\nimport {CustomTranslateModule} from '../../../shared/modules/translate/custom-translate.module';\nimport { LoginComponent } from './login.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { AuthModule } from '../../../shared/modules/auth/auth.module';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    LoginFormComponent\n  ],\n  imports: [\n    LoginRoutingModule,\n    CommonModule,\n    GridModule,\n    ButtonModule,\n    FormsModule,\n    MatInputModule,\n    CustomTranslateModule,\n    AuthModule\n  ],\n})\nexport class LoginModule { }\n"]}