{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/main/components/landing/landing.component.ts","webpack:///src/app/shared/modules/auth/auth.module.ts","webpack:///src/app/shared/modules/auth/guards/auth-guard.service.ts","webpack:///src/app/shared/modules/auth/services/auth/auth.service.ts","webpack:///src/app/shared/modules/http/http.module.ts","webpack:///src/app/shared/modules/http/services/custom-http/custom-http.service.ts","webpack:///src/app/shared/modules/interceptor/interceptor.module.ts","webpack:///src/app/shared/modules/interceptor/interceptors/http-error.interceptor.ts","webpack:///src/app/shared/modules/interceptor/interceptors/invalid-token.interceptor.ts","webpack:///src/app/shared/modules/notification/notification.module.ts","webpack:///src/app/shared/modules/notification/services/notification/notification.service.ts","webpack:///src/app/shared/modules/translate/custom-translate.module.ts","webpack:///src/app/shared/modules/translate/directives/translate.directive.ts","webpack:///src/app/shared/modules/translate/services/language-preference.service.ts","webpack:///src/app/shared/services/app.init.ts","webpack:///src/app/shared/services/environment/environment.service.ts","webpack:///src/app/shared/services/global-error-handler/global-error-handler.service.ts","webpack:///src/app/shared/services/theme/theme.service.ts","webpack:///src/app/shared/services/users/user.service.ts","webpack:///src/app/shared/services/util/util.service.ts","webpack:///src/environments/dynamic-environment.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","loadChildren","m","LoginModule","MainContentModule","canActivate","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","overlayContainer","changeDetectorRef","themeService","themeChangingHandler","newTheme","getThemeForColorScheme","matches","removeActiveThemeFromApplication","addThemeToWholeApplication","detectChanges","overlayContainerClasses","getContainerElement","classList","themeClassesToRemove","Array","from","filter","item","includes","length","remove","darkModeMediaQuery","window","matchMedia","theme","getThemeBasedOnSystemPreference","add","componentCssClass","addListener","removeListener","selector","templateUrl","init_app","appLoadService","init","AppModule","provide","useFactory","deps","multi","useClass","register","enabled","declarations","providers","bootstrap","LandingComponent","router","activatedRoute","authService","environment","isAuthenticated","navigate","frontend","BASIC_ROUTES","HOME","relativeTo","LOGIN","template","changeDetection","OnPush","AuthModule","AuthGuard","notificationService","translateService","next","state","get","subscribe","message","title","warning","providedIn","AuthService","httpService","cookieService","doesTheUserHaveAValidToken","getToken","authentication","AUTHTOKENNAME","user","post","backend","ENTRY_POINTS","SIGNIN","username","password","pwd","pipe","clearSession","clearHttpCookies","SIGNOUT","HttpModule","CustomHttpService","httpClient","environmentService","httpOptions","headers","withCredentials","observe","url","initEnvironment","baseUrl","httpResponse","body","backendUrl","InterceptorModule","HttpErrorInterceptor","request","handle","error","InvalidTokenInterceptor","status","logout","info","NotificationModule","NotificationService","toastrService","CustomTranslateModule","languagePreferenceService","translate","addLangs","preferedLanguage","setDefaultLang","use","forChild","loader","HttpLoaderFactory","extend","http","TranslateDirective","elementRef","renderer","property","key","translation","setProperty","onLangChange","nativeElement","LanguagePreferenceService","utilService","userService","defaultLanguage","localStorage","getItem","isNullOrUndefined","translationFileCode","mapLanguageToTranslationFileCode","storagePrefereanceInBrowser","preference","setItem","languageCode","setUserLanguagePreference","name","mapTranslationCodeToEnglishLanguageName","englishPerferedLanguage","AppInitService","fetch","response","json","config","toPromise","EnvironmentService","GlobalErrorHandlerService","chunkFailedMessage","test","reloadWindow","console","location","reload","ThemeService","darkMode","UserService","customHttpService","base","USERS","CURRENT","languagePreference","UPDATE_LANGUAGE_PREFERENCE","UtilService","value","undefined","DynamicEnvironment","Environment","production","TOKENNAME","TITLE","POLLING_TIMEOUT","PAGE_SIZE","LANDING","DASHBOARD","STATUS","GAME","RULE","CREATE","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './shared/modules/auth/guards/auth-guard.service';\nimport { LandingComponent } from './main/components/landing/landing.component';\n\n// TODO: figure out how to use the environment here for the environment routes\nconst appRoutes: Routes = [\n  {\n    path: '',\n    component: LandingComponent\n  },\n  {\n    path: 'login',\n    loadChildren: () => import('./main/modules/login/login.module').then(m => m.LoginModule)\n  },\n  {\n    path: 'home',\n    loadChildren: () => import('./main/modules/main-content/main-content.module').then(m => m.MainContentModule),\n    canActivate: [AuthGuard],\n  },\n  { path: '**', redirectTo: '' }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n}\n","import {Component, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { ThemeService } from './shared/services/theme/theme.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  \n  // @HostBinding('class') \n  public componentCssClass;\n  \n  public themeChangingHandler = (e) => {\n    const newTheme = this.themeService.getThemeForColorScheme(e?.matches);\n    \n    this.removeActiveThemeFromApplication();\n    this.addThemeToWholeApplication(newTheme);\n    \n    this.changeDetectorRef.detectChanges();\n  }\n\n  private removeActiveThemeFromApplication = () => {\n    const overlayContainerClasses = this.overlayContainer.getContainerElement().classList;\n    const themeClassesToRemove = Array.from(overlayContainerClasses).filter((item: string) => item.includes('-theme'));\n    \n    if (themeClassesToRemove.length > 0) {\n      this.overlayContainer.getContainerElement().classList.remove(...themeClassesToRemove);\n    }\n  }\n\n  public darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n  constructor(private overlayContainer: OverlayContainer, \n              private changeDetectorRef: ChangeDetectorRef,\n              private themeService: ThemeService) {}\n\n  public ngOnInit(): void {\n    const theme: 'black-theme' | 'light-theme' = this.themeService.getThemeBasedOnSystemPreference();\n    \n    this.overlayContainer.getContainerElement().classList.add(theme);\n    this.componentCssClass = theme;\n\n    this.addThemeToWholeApplication(theme);\n\n    this.darkModeMediaQuery.addListener(this.themeChangingHandler);\n  }\n\n  private addThemeToWholeApplication(theme: 'black-theme' | 'light-theme'): void {\n    this.overlayContainer.getContainerElement().classList.add(theme);\n    this.componentCssClass = theme;\n  }\n\n  public ngOnDestroy(): void {\n    this.darkModeMediaQuery.removeListener(this.themeChangingHandler);\n  }\n}\n","<div [class]=\"componentCssClass\">\n    <router-outlet></router-outlet>\n</div>\n","import { APP_INITIALIZER, NgModule, ErrorHandler } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CookieService } from 'ngx-cookie-service';\nimport { TranslateStore } from '@ngx-translate/core';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { LandingComponent } from './main/components/landing/landing.component';\nimport { AuthModule } from './shared/modules/auth/auth.module';\nimport { InterceptorModule } from './shared/modules/interceptor/interceptor.module';\nimport { GlobalErrorHandlerService } from './shared/services/global-error-handler/global-error-handler.service';\nimport { AppInitService } from './shared/services/app.init';\nimport { CustomTranslateModule } from './shared/modules/translate/custom-translate.module';\nimport { MatButtonModule } from '@angular/material/button';\n\nexport function init_app(appLoadService: AppInitService): () => Promise<any> {\n  return () => appLoadService.init();\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n    LandingComponent\n  ],\n  providers: [\n    CookieService,\n    TranslateStore,\n    AppInitService,\n    { provide: APP_INITIALIZER, useFactory: init_app, deps: [AppInitService], multi: true },\n    {provide: ErrorHandler, useClass: GlobalErrorHandlerService}\n  ],\n  imports: [\n    AppRoutingModule,\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    CustomTranslateModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {enabled: true}),\n    AuthModule,\n    InterceptorModule,\n    MatButtonModule\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport { AuthService } from '../../../shared/modules/auth/services/auth/auth.service';\nimport { Environment } from '../../../../environments/environment';\n\n@Component({\n  template: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingComponent implements OnInit {\n\n  private environment = new Environment();\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private authService: AuthService) {\n  }\n\n  public ngOnInit(): void {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['../' + this.environment.frontend.BASIC_ROUTES.HOME], {relativeTo: this.activatedRoute});\n    } else {\n      this.router.navigate(['../' + this.environment.frontend.BASIC_ROUTES.LOGIN], {relativeTo: this.activatedRoute});\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NotificationModule} from '../notification/notification.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    NotificationModule\n  ]\n})\nexport class AuthModule { }\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {forkJoin, Observable} from 'rxjs';\nimport {TranslateService} from '@ngx-translate/core';\nimport {AuthService} from '../services/auth/auth.service';\nimport {NotificationService} from '../../notification/services/notification/notification.service';\nimport {Environment} from '../../../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  private environment = new Environment();\n\n  constructor(private authService: AuthService,\n              private router: Router,\n              private notificationService: NotificationService,\n              private translateService: TranslateService) {\n  }\n\n  public canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n\n    forkJoin([\n      this.translateService.get('warnings.not_authorized.title'),\n      this.translateService.get('warnings.not_authorized.body'),\n    ]).subscribe(([message, title]: [string, string]) => {\n      this.notificationService.warning(message, title);\n    });\n\n    this.router.navigate([this.environment.frontend.BASIC_ROUTES.LOGIN]);\n    return false;\n  }\n\n}\n","import {Router} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {tap} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {CustomHttpService} from '../../../http/services/custom-http/custom-http.service';\nimport {Environment} from '../../../../../../environments/environment';\nimport {CookieService} from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  private environment = new Environment();\n\n  constructor(private router: Router,\n              private httpService: CustomHttpService,\n              private cookieService: CookieService) {\n  }\n\n  public isAuthenticated(): boolean {\n    return this.doesTheUserHaveAValidToken();\n  }\n\n  private doesTheUserHaveAValidToken(): boolean {\n    return this.getToken().includes('true');\n  }\n\n  public getToken(): string {\n    return this.cookieService.get(this.environment.authentication.AUTHTOKENNAME);\n  }\n\n  public login(user: any): Observable<any> {\n    return this.httpService.post(\n      this.environment.backend.ENTRY_POINTS.SIGNIN, {\n        username: user.username,\n        password: user.pwd,\n      }).pipe(\n        tap(() => this.router.navigate([this.environment.frontend.BASIC_ROUTES.HOME]))\n      );\n  }\n\n  public logout(): void {\n    this.clearSession();\n\n    this.router.navigate([this.environment.frontend.BASIC_ROUTES.LOGIN]);\n  }\n\n  public clearSession(): void {\n    this.clearHttpCookies();\n  }\n\n  private clearHttpCookies(): void {\n    this.httpService.post(this.environment.backend.ENTRY_POINTS.SIGNOUT)\n      .subscribe();\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ]\n})\nexport class HttpModule { }\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {EnvironmentService} from '../../../../services/environment/environment.service';\n\n// TODO: move to shared services\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomHttpService {\n  private environment: any;\n\n  private baseUrl: string;\n\n  public httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'}),\n    withCredentials: true,\n    observe: 'response' as 'response',\n  };\n\n  constructor(private httpClient: HttpClient,\n              private environmentService: EnvironmentService) {\n  }\n\n  public get<T>(url: string): Observable<T> {\n    if (!this.environment) {\n      this.initEnvironment();\n    }\n\n    return this.httpClient.get<T>(this.baseUrl + url, this.httpOptions)\n      .pipe(\n        map((httpResponse: HttpResponse<T>) => httpResponse.body)\n      );\n  }\n\n  public post<T>(url: string, body?: T): Observable<T> {\n    if (!this.environment) {\n      this.initEnvironment();\n    }\n\n    return this.httpClient.post<T>(this.baseUrl + url, body, this.httpOptions)\n      .pipe(\n        map((httpResponse: HttpResponse<T>) => httpResponse.body),\n      );\n  }\n\n  private initEnvironment(): void {\n    this.environment = this.environmentService.get();\n\n    this.baseUrl = this.environment.environment.backendUrl;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {HttpErrorInterceptor} from './interceptors/http-error.interceptor';\nimport {InvalidTokenInterceptor} from './interceptors/invalid-token.interceptor';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: InvalidTokenInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true}\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ]\n})\nexport class InterceptorModule {\n}\n","import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {NotificationService} from '../../notification/services/notification/notification.service';\nimport {Injectable} from '@angular/core';\n\n// TODO: move to shared services\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  public constructor(private notificationService: NotificationService) {\n  }\n\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        retry(2),\n        catchError((error: HttpErrorResponse) => {\n          const message = error.error.message ? error.error.message : error.message;\n          this.notificationService.warning(message);\n\n          return throwError(error);\n        }),\n      );\n  }\n}\n","import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {Injectable} from '@angular/core';\nimport {AuthService} from '../../auth/services/auth/auth.service';\nimport {NotificationService} from '../../notification/services/notification/notification.service';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InvalidTokenInterceptor implements HttpInterceptor {\n\n  public constructor(\n    private authService: AuthService,\n    private notificationService: NotificationService,\n    private translateService: TranslateService) {}\n\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 401 && !request.url.includes('signIn')) {\n            this.authService.logout();\n\n            this.translateService.get('info.no-valid-session.body')\n              .subscribe((message: string) => this.notificationService.info(message));\n            return;\n        }\n\n        return throwError(error);\n        }),\n      );\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ToastrModule} from 'ngx-toastr';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ToastrModule.forRoot()\n  ]\n})\nexport class NotificationModule { }\n","import {Injectable} from '@angular/core';\nimport {ToastrService} from 'ngx-toastr';\nimport {NotificationModule} from '../../notification.module';\n\n@Injectable({\n  providedIn: NotificationModule,\n})\nexport class NotificationService {\n\n  constructor(private toastrService: ToastrService) {\n  }\n\n  public warning(message: string, title?: string): void {\n    this.toastrService.warning(message, title);\n  }\n\n  public info(message: string, title?: string): void {\n    this.toastrService.info(message, title);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TranslateLoader, TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {TranslateDirective} from './directives/translate.directive';\nimport {HttpModule} from '../http/http.module';\nimport { LanguagePreferenceService } from './services/language-preference.service';\n\n@NgModule({\n  declarations: [\n    TranslateDirective,\n  ],\n  exports: [\n    TranslateDirective,\n    TranslateModule,\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient],\n      },\n      extend: true\n    }),\n    HttpModule\n  ]\n})\nexport class CustomTranslateModule {\n  constructor(languagePreferenceService: LanguagePreferenceService, \n              translate: TranslateService) {\n    translate.addLangs(['nl', 'en']);\n\n    const preferedLanguage = languagePreferenceService.get();\n\n    translate.setDefaultLang(preferedLanguage);\n    translate.use(preferedLanguage);\n  }\n}\n\nexport function HttpLoaderFactory(http: HttpClient): any {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {debounceTime, retry, switchMap} from 'rxjs/operators';\n\n@Directive({\n  selector: '[appTranslate]',\n})\nexport class TranslateDirective implements OnInit {\n\n  @Input('appTranslate')\n  public key: string;\n\n  @Input()\n  public property = 'innerHTML';\n\n  public constructor(private translateService: TranslateService,\n                     private elementRef: ElementRef,\n                     private renderer: Renderer2) {\n  }\n\n  public ngOnInit(): void {\n    this.translateService.get(this.key)\n    .pipe(\n      debounceTime(200),\n      retry(5)\n    ).subscribe((translation) => this.setProperty(translation));\n\n    this.translateService.onLangChange\n        .pipe(\n          switchMap(() => this.translateService.get(this.key)\n          .pipe(\n            debounceTime(200),\n            retry(5)\n          ))\n        ).subscribe((translation) => this.setProperty(translation));\n  }\n\n  private setProperty(translation: string): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, this.property, translation);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UtilService } from '../../../services/util/util.service';\nimport { UserService } from '../../../services/users/user.service';\nimport { User } from '../../../interfaces/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguagePreferenceService {\n  private defaultLanguage = 'en';\n  \n  constructor(private utilService: UtilService,\n              private translateService: TranslateService,\n              private userService: UserService) { }\n\n  public get(): string {\n    let preferedLanguage = localStorage.getItem('preferedLanguage');\n\n    if (this.utilService.isNullOrUndefined(preferedLanguage)) {\n      preferedLanguage = this.defaultLanguage; \n    }\n\n    return preferedLanguage;\n  }\n\n  public setWithUser(user: User): void {\n    const translationFileCode = this.mapLanguageToTranslationFileCode(user.preferedLanguage);\n    \n    this.storagePrefereanceInBrowser(translationFileCode);\n  }\n\n  private storagePrefereanceInBrowser(preference: string): void {\n    if (this.utilService.isNullOrUndefined(preference)) {\n      localStorage.setItem('preferedLanguage', this.defaultLanguage);\n    } else {\n      localStorage.setItem('preferedLanguage', preference);\n    }\n  }\n\n  public setWithLanguageCode(user: User, languageCode: string): void {\n    if (languageCode === 'en') {\n      this.translateService.use('en');\n    } else if (languageCode === 'nl') {\n      this.translateService.use('nl');\n    }\n\n    this.storagePrefereanceInBrowser(languageCode);\n\n    this.userService.setUserLanguagePreference(user.name, this.mapTranslationCodeToEnglishLanguageName(languageCode))\n      .subscribe();\n  }\n\n  private mapLanguageToTranslationFileCode(englishPerferedLanguage: string): string {\n    if (englishPerferedLanguage === 'dutch') {\n      return 'nl';\n    }\n\n    if (englishPerferedLanguage === 'english') {\n      return 'en';\n    }\n  }\n\n  public mapTranslationCodeToEnglishLanguageName(languageCode: string): string {\n    if (languageCode === 'nl') {\n      return 'dutch';\n    }\n\n    if (languageCode === 'en') {\n      return 'english';\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {from} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\ndeclare var window: any;\n\n@Injectable()\nexport class AppInitService {\n\n  // This is the method you want to call at bootstrap\n  // Important: It should return a Promise\n  public init(): Promise<any> {\n    return from(\n      fetch('assets/app-config.json').then((response: any) => {\n        return response.json();\n      }),\n    ).pipe(\n      map((config) => {\n        window.config = config;\n        return;\n      })).toPromise();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Environment} from '../../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnvironmentService {\n\n  constructor() { }\n\n  public get(): any {\n    return new Environment();\n  }\n}\n","import { Injectable, ErrorHandler } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalErrorHandlerService implements ErrorHandler {\n  \n  public handleError(error: any): void {\n    const chunkFailedMessage = /Loading chunk [\\d]+ failed/;\n \n     if (chunkFailedMessage.test(error.message)) {\n       this.reloadWindow();\n     } else {\n       // tslint:disable-next-line\n       console.error(error);\n     }\n   }\n\n   public reloadWindow(): any {\n     window.location.reload(true);\n   }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n\n  public getThemeBasedOnSystemPreference(): 'black-theme' | 'light-theme' {\n    if (window.matchMedia('(prefers-color-scheme: dark)')?.matches) {\n      return 'black-theme';\n    } else {\n      return 'light-theme';\n    }\n  }\n\n  public getThemeForColorScheme(darkMode: boolean): 'black-theme' | 'light-theme' {\n    if (darkMode) {\n      return 'black-theme';\n    } else {\n      return 'light-theme';\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport { User } from '../../interfaces/user.interface';\nimport { CustomHttpService } from '../../modules/http/services/custom-http/custom-http.service';\nimport { Environment } from '../../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private environment = new Environment();\n  private base = this.environment.backend.ENTRY_POINTS.USERS;\n\n  constructor(private customHttpService: CustomHttpService) {\n  }\n\n  public getAll(): Observable<User[]> {\n    return this.customHttpService.get<User[]>(this.environment.backend.ENTRY_POINTS.USERS);\n  }\n\n  public getCurrentUser(): Observable<User> {\n    return this.customHttpService.get<User>(this.base + this.environment.backend.ENTRY_POINTS.CURRENT);\n  }\n\n  public setUserLanguagePreference(username: string, languagePreference: string): Observable<User> {\n    const body: any = {\n      username,\n      languagePreference\n    };\n    \n    return this.customHttpService.post(this.base + this.environment.backend.ENTRY_POINTS.UPDATE_LANGUAGE_PREFERENCE, body);\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UtilService {\n\n  public isNullOrUndefined(value: any): boolean {\n    return value === null || value === undefined;\n  }\n}\n","import {DynamicEnvironmentInterface} from './dynamic-environment.interface';\n\ndeclare var window: any;\n\nexport class DynamicEnvironment {\n  public get environment(): DynamicEnvironmentInterface {\n    return window.config;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nimport {DynamicEnvironment} from './dynamic-environment';\n\nexport class Environment extends DynamicEnvironment {\n\n  public production: boolean;\n  public authentication: any;\n  public frontend: any;\n  public backend: any;\n\n  constructor() {\n    super();\n\n    this.production = false;\n    // TODO: create interface for environments\n    this.authentication = {\n      TOKENNAME: 'montepoeliJwt',\n      AUTHTOKENNAME: 'montepoeliAuthenticated' \n    };\n\n    this.frontend = {\n      TITLE: 'Angular Starter kit',\n      POLLING_TIMEOUT: 1000,\n      PAGE_SIZE: 20,\n      BASIC_ROUTES: {\n        LANDING: 'landing',\n        LOGIN: 'login',\n        HOME: 'home',\n      },\n    };\n\n    this.backend = {\n      ENTRY_POINTS: {\n        SIGNIN: '/signIn',\n        SIGNOUT: '/logout',\n        DASHBOARD: '/statistics',\n        STATUS: '/status',\n        USERS: '/users',\n        GAME: '/game',\n        RULE: '/rule',\n        CREATE: '/create',\n        UPDATE_LANGUAGE_PREFERENCE: '/language-preference',\n        CURRENT: '/current'\n      },\n    };\n  }\n}\n","\nimport {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {Environment} from './environments/environment';\n\nconst environment = new Environment();\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => {\n    throw err;\n  });\n"]}