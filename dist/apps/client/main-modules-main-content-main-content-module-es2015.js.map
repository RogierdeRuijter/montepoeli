{"version":3,"sources":["/Users/rogierderuijter/Projects/montepoeli/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","./src/app/main/modules/main-content/main-content-routing.module.ts","./src/app/main/modules/main-content/main-content.component.ts","./src/app/main/modules/main-content/main-content.component.html","./src/app/main/modules/main-content/main-content.module.ts","./src/app/shared/services/grid/grid.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2F;AAC1C;AACiB;AACmB;AACjC;;AAEpD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACwC;AACQ;AAChD;AACA;AACA,oBAAoB,8DAAuB,EAAE,qBAAqB;AAClE,oBAAoB,8DAAuB,EAAE,4CAA4C,kCAAkC,EAAE,EAAE;AAC/H,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB,iBAAiB;AACjB,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,sDAAe,CAAC,8DAAe,GAAG;AACxH;AACA;AACA,KAAK,OAAO,8DAAQ;AACpB;AACA,wCAAwC,wEAAkB,EAAE,2CAA2C,yBAAyB,8DAAQ,CAAC,8DAAQ,GAAG,EAAE,2CAA2C;AACjM,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,8DAAe,EAAE,EAAE,EAAE,QAAQ,EAAE;AACrE,WAAW,EAYV;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,yBAAyB,EAAE;AAC3B,sCAAsC,MAAM,EAAE,eAAe,GAAG;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAYV;AACD;AACA;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAWV;AACD;AACA;AACA;AACA,kBAAkB;AAClB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4CAAO;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB,qCAAqC,yEAAW;AAChD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB,qCAAqC,yEAAW;AAChD,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,8BAA8B,0DAAa;AAC3C;AACA,0BAA0B,mDAAM,sBAAsB,2DAAI,2BAA2B,2DAAI,KAAK,mEAAY;AAC1G,oCAAoC,0DAAG;AACvC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oCAAoC,+CAAU;AAC9C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS,QAAQ,gEAAS,OAAO,0DAAG;AACpC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uBAAuB,kCAAkC,KAAK,gEAAS;AACvE;AACA,mBAAmB,EAAE;AACrB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,sDAAe,gBAAgB,sDAAe,CAAC,oDAAa,GAAG;AACvK;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,oDAAM;AAClB;AACA,8CAA8C,wEAAkB,EAAE,iDAAiD,+BAA+B,8DAAQ,gBAAgB,8DAAQ,CAAC,oDAAM,GAAG,EAAE,iDAAiD;AAC/O,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,qBAAqB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC3F,WAAW,EAuBV;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEuE;;AAEvE,kC;;;;;;;;;;;;AC9aA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAC4B;AACnB;;;AAEhE,MAAM,iBAAiB,GAAW;IAChC;QACE,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,GAAG,EAAE,CAAC,0cAAkD,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;QAC9F,SAAS,EAAE,4EAAoB;QAC/B,WAAW,EAAE,CAAC,wFAAS,CAAC;KACzB;CACF,CAAC;AAMK,MAAM,wBAAwB;;uGAAxB,wBAAwB;0KAAxB,wBAAwB,kBAH1B,CAAC,4DAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACzC,4DAAY;mIAEX,wBAAwB,uFAFzB,4DAAY;6FAEX,wBAAwB;cAJpC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;gBACnD,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;;;;;;;;;;;ACjB0J;AACnG;AACO;AACU;AAC1C;;;;;;;ICF3B,sEACE;IAAA,4EAA4C;IAC9C,4DAAM;;;IACN,sEACE;IAAA,4EAAiD;IACnD,4DAAM;;ADIH,MAAM,oBAAoB;IAE/B,YAAoB,wBAAkD,EAClD,QAAkB,EAClB,WAAwB,EACxB,QAAkB,EAClB,iBAAoC;QAJpC,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,aAAQ,GAAR,QAAQ,CAAU;QAClB,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAU;QAClB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAUhD,aAAQ,GAAkB,IAAI,4CAAO,EAAE,CAAC;IAVW,CAAC;IAYrD,QAAQ;QACb,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;aACpC,IAAI,CACH,6DAAM,CAAC,CAAC,cAAyB,EAAE,EAAE,CAAC,cAAc,KAAK,oEAAS,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,KAAK,cAAc,CAAC,EACrH,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,cAAc,CAAC,EAC3C,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC,EACjD,6DAAM,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,2BAA2B,IAAI,IAAI,CAAC,2BAA2B,CAAC,MAAM,KAAK,CAAC,CAAC,EAChG,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,EACzC,gEAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC3B,CAAC,SAAS,EAAE,CAAC;QAEd,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;aACpC,IAAI,CACH,6DAAM,CAAC,CAAC,cAAyB,EAAE,EAAE,CAAC,cAAc,KAAK,oEAAS,CAAC,WAAW,CAAC,EAC/E,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,EACrC,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC,EACjD,6DAAM,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,KAAK,CAAC,CAAC,EACtF,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,EACpC,gEAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB,CAAC,SAAS,EAAE,CAAC;IAClB,CAAC;IAEY,kBAAkB;;YAC7B,MAAM,EAAE,sBAAsB,EAAE,8BAA8B,EAAE,GAAG,MAAM,yhCAA2D,CAAC;YAErI,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,CAAC;YACvF,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE1C,MAAM,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,CAAC;YAC3G,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAClG,CAAC;KAAA;IAEY,uBAAuB;;YAClC,MAAM,EAAE,2BAA2B,EAAE,gCAAgC,EAAE,GAAG,MAAM,2qCAAwE,CAAC;YAEzJ,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC;YACzF,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE1C,MAAM,yBAAyB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,CAAC;YAErH,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,yBAAyB,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5G,CAAC;KAAA;IAEM,WAAW;;QAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAEzB,UAAI,CAAC,sBAAsB,0CAAE,KAAK,GAAG;QACrC,UAAI,CAAC,2BAA2B,0CAAE,KAAK,GAAG;IAC5C,CAAC;;wFAnEU,oBAAoB;oGAApB,oBAAoB;6EAQK,8DAAgB;6EAGX,8DAAgB;;;;;;QCtB3D,yEACE;QAAA,yEACE;QAAA,gHACE;QAEF,gHACE;QAEJ,4DAAM;QACR,4DAAM;;QAPG,0DAA+B;QAA/B,6FAA+B;QAG/B,0DAAqC;QAArC,mGAAqC;;6FDMjC,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;kBASE,uDAAS;mBAAC,eAAe,EAAE,EAAE,IAAI,EAAE,8DAAgB,EAAE,MAAM,EAAE,KAAK,EAAC;;kBAGnE,uDAAS;mBAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,8DAAgB,EAAE,MAAM,EAAE,KAAK,EAAC;;;;;;;;;;;;;;AEtB3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACiB;AACS;;AAWlE,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBALnB;YACP,4DAAY;YACZ,qFAAwB;SACzB;mIAEU,iBAAiB,mBAP1B,4EAAoB,aAGpB,4DAAY;QACZ,qFAAwB;6FAGf,iBAAiB;cAT7B,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,4EAAoB;iBACrB;gBACD,OAAO,EAAE;oBACP,4DAAY;oBACZ,qFAAwB;iBACzB;aACF;;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAE+B;AACrC;AACgB;;;AAK9C,MAAM,WAAW;IAkBlB,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAhBtD,gBAAW,GAAG;YACjB,EAAE,EAAE,uBAAuB;YAC1B,EAAE,EAAE,2CAA2C;YAC/C,EAAE,EAAE,2CAA2C;YAC/C,EAAE,EAAE,4CAA4C;YAChD,EAAE,EAAE,qBAAqB;SAC1B,CAAC;QAEM,uBAAkB,GAAG;YAC3B,IAAI,CAAC,WAAW,CAAC,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,EAAE;SACpB,CAAC;IAE2D,CAAC;IAElE,mCAAmC;IAC5B,oBAAoB;QACrB,OAAO,IAAI,CAAC,kBAAkB;aAC3B,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;aAChC,IAAI,CACH,0DAAG,CAAC,CAAC,eAAgC,EAAE,EAAE;YACvC,IAAI,UAA4C,CAAC;YAEjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,IAAsC,EAAE,EAAE;gBAC/E,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACjD,MAAM,YAAY,GAAY,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;gBAE7E,IAAI,YAAY,KAAK,IAAI,EAAE;oBACzB,UAAU,GAAG,IAAI,CAAC;oBAClB,OAAO;iBACR;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,EACF,0DAAG,CAAC,CAAC,UAA4C,EAAE,EAAE;YACnD,QAAQ,UAAU,EAAE;gBAClB,KAAK,IAAI;oBACP,OAAO,6DAAS,CAAC,WAAW,CAAC;gBAC/B,KAAK,IAAI;oBACP,OAAO,6DAAS,CAAC,KAAK,CAAC;gBACzB,KAAK,IAAI;oBACP,OAAO,6DAAS,CAAC,MAAM,CAAC;gBAC1B,KAAK,IAAI;oBACP,OAAO,6DAAS,CAAC,KAAK,CAAC;gBACzB,KAAK,IAAI;oBACP,OAAO,6DAAS,CAAC,WAAW,CAAC;gBAC/B;oBACE,OAAO,6DAAS,CAAC,GAAG,CAAC;aACxB;QACH,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;sEAzDM,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"main-modules-main-content-main-content-module-es2015.js","sourcesContent":["import { NgModule, Injectable, ɵɵdefineInjectable, ɵɵinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/layout-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/media-matcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\nif (false) {\n    /**\n     * The internal matchMedia method to return back a MediaQueryList like object.\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._matchMedia;\n    /**\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction BreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    BreakpointState.prototype.matches;\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     * @type {?}\n     */\n    BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction InternalBreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.matches;\n    /**\n     * The media query being to be matched\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\nfunction Query() { }\nif (false) {\n    /** @type {?} */\n    Query.prototype.observable;\n    /** @type {?} */\n    Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        mediaQuery => this._registerQuery(mediaQuery).mql.matches));\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => this._registerQuery(query).observable));\n        /** @type {?} */\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        (breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            (state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        const queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            const handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this._zone.run((/**\n             * @return {?}\n             */\n            () => observer.next(e))));\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        (nextMql) => ({ query, matches: nextMql.matches }))), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\nif (false) {\n    /**\n     * A map of all media queries currently being listened for.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._queries;\n    /**\n     * A subject for all other observables to takeUntil based on.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._destroySubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._mediaMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../../../shared/modules/auth/guards/auth-guard.service';\nimport { MainContentComponent } from './main-content.component';\n\nconst mainContentRoutes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('../../../shared/modules/home/home.module').then(m => m.HomeModule),\n    component: MainContentComponent,\n    canActivate: [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(mainContentRoutes)],\n  exports: [RouterModule],\n})\nexport class MainContentRoutingModule {\n}\n","import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Injector, OnInit, Compiler, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { tap, filter, takeUntil } from 'rxjs/operators';\nimport { GridSizes } from '../../../shared/static-files/enums';\nimport { GridService } from '../../../shared/services/grid/grid.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-main-content',\n  templateUrl: './main-content.component.html',\n  styleUrls: ['main-content.component.scss']\n})\nexport class MainContentComponent implements OnInit, OnDestroy {\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver, \n              private injector: Injector,\n              private gridService: GridService,\n              private compiler: Compiler,\n              private changeDetectorRef: ChangeDetectorRef) {}\n\n  @ViewChild('mobileContent', { read: ViewContainerRef, static: false}) \n  public mobileContentContainer: ViewContainerRef;\n\n  @ViewChild('largeScreenContent', { read: ViewContainerRef, static: false}) \n  public largeScreenContentContainer: ViewContainerRef;\n\n  public activeView: string;\n\n  private destory$: Subject<void> = new Subject();\n\n  public ngOnInit(): void {\n    this.gridService.gridChangeObservable()\n      .pipe(\n        filter((activeGridSize: GridSizes) => activeGridSize !== GridSizes.EXTRA_SMALL && this.activeView !== 'large-screen'),\n        tap(() => this.activeView = 'large-screen'),\n        tap(() => this.changeDetectorRef.detectChanges()),\n        filter(() => !this.largeScreenContentContainer || this.largeScreenContentContainer.length === 0),\n        tap(() => this.createLargeScreenConent()),\n        takeUntil(this.destory$)\n    ).subscribe();\n\n    this.gridService.gridChangeObservable()\n      .pipe(\n        filter((activeGridSize: GridSizes) => activeGridSize === GridSizes.EXTRA_SMALL),\n        tap(() => this.activeView = 'mobile'),\n        tap(() => this.changeDetectorRef.detectChanges()),\n        filter(() => !this.mobileContentContainer || this.mobileContentContainer.length === 0),\n        tap(() => this.createMobileConent()),\n        takeUntil(this.destory$)\n      ).subscribe();\n  }\n\n  public async createMobileConent(): Promise<void> {\n    const { MobileContentComponent, InternalMobileContentComponent } = await import('./modules/mobile-content/mobile-content.component');\n    \n    const factory = await this.compiler.compileModuleAsync(InternalMobileContentComponent);\n    const ref = factory.create(this.injector);\n    \n    const mobileContentFactory = this.componentFactoryResolver.resolveComponentFactory(MobileContentComponent);\n    this.mobileContentContainer.createComponent(mobileContentFactory, null, this.injector, [], ref);\n  }\n\n  public async createLargeScreenConent(): Promise<void> {\n    const { LargeScreenContentComponent, InternalLargeScreenContentModule } = await import('./modules/larger-screen-content/large-screen-content.component');\n\n    const factory = await this.compiler.compileModuleAsync(InternalLargeScreenContentModule);\n    const ref = factory.create(this.injector);\n\n    const largeScreenContentFactory = this.componentFactoryResolver.resolveComponentFactory(LargeScreenContentComponent);\n\n    this.largeScreenContentContainer.createComponent(largeScreenContentFactory, null, this.injector, [], ref);\n  }\n\n  public ngOnDestroy(): void {\n    this.destory$.next();\n    this.destory$.complete();\n\n    this.mobileContentContainer?.clear();\n    this.largeScreenContentContainer?.clear();\n  }\n}\n","<div id=\"page-container\">\n  <div id=\"content-wrap\">\n    <div *ngIf=\"activeView === 'mobile'\">\n      <ng-container #mobileContent></ng-container>\n    </div>\n    <div *ngIf=\"activeView === 'large-screen'\">\n      <ng-container #largeScreenContent></ng-container>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainContentComponent } from './main-content.component';\nimport { MainContentRoutingModule } from './main-content-routing.module';\n\n@NgModule({\n  declarations: [\n    MainContentComponent\n  ],\n  imports: [\n    CommonModule,\n    MainContentRoutingModule\n  ],\n})\nexport class MainContentModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { map } from 'rxjs/operators';\nimport { GridSizes } from '../../static-files/enums';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GridService {\n\n  private breakPoints = {\n       xs: '(max-width: 575.99px)',\n        sm: '(min-width: 576px) and (max-width: 767px)',\n        md: '(min-width: 768px) and (max-width: 991px)',\n        lg: '(min-width: 992px) and (max-width: 1439px)',\n        xl: '(min-width: 1440px)'\n      };\n    \n      private breakPointPxValues = [\n        this.breakPoints.xs,\n        this.breakPoints.sm,\n        this.breakPoints.md,\n        this.breakPoints.lg,\n        this.breakPoints.xl\n      ];\n\n      constructor(private breakpointObserver: BreakpointObserver) {}\n\n  // TODO: write a unit test for this\n  public gridChangeObservable(): Observable<GridSizes> {\n        return this.breakpointObserver\n          .observe(this.breakPointPxValues)\n          .pipe(\n            map((breakPointState: BreakpointState) => {\n              let activeGrid: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    \n              Object.keys(this.breakPoints).forEach((grid: 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n                const breakPointPxValue = this.breakPoints[grid];\n                const isBreakPoint: boolean = breakPointState.breakpoints[breakPointPxValue];\n    \n                if (isBreakPoint === true) {\n                  activeGrid = grid;\n                  return;\n                }\n              });\n    \n              return activeGrid;\n            }),\n            map((activeGrid: 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n              switch (activeGrid) {\n                case 'xs':\n                  return GridSizes.EXTRA_SMALL;\n                case 'sm':\n                  return GridSizes.SMALL;\n                case 'md':\n                  return GridSizes.MEDIUM;\n                case 'lg':\n                  return GridSizes.LARGE;\n                case 'xl':\n                  return GridSizes.EXTRA_LARGE;\n                default: \n                  return GridSizes.ALL;\n              }\n            })\n          );\n      }   \n}\n"],"sourceRoot":"webpack:///"}